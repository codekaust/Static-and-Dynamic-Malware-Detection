#!/usr/bin/env python
# coding: utf-8

# In[14]:


import re
import statistics
import json


# In[7]:


API_api_to_type_dict = json.loads('''{'__exception__':'exception',
'RegOpenKeyExA': 'registry',
 'RegOpenKeyExW': 'registry',
 'RegCreateKeyExA': 'registry',
 'RegCreateKeyExW': 'registry',
 'RegDeleteKeyA': 'registry',
 'RegDeleteKeyW': 'registry',
 'RegEnumKeyW': 'registry',
 'RegEnumKeyExA': 'registry',
 'RegEnumKeyExW': 'registry',
 'RegEnumValueA': 'registry',
 'RegEnumValueW': 'registry',
 'RegSetValueExA': 'registry',
 'RegSetValueExW': 'registry',
 'RegQueryValueExA': 'registry',
 'RegQueryValueExW': 'registry',
 'RegDeleteValueA': 'registry',
 'RegDeleteValueW': 'registry',
 'RegQueryInfoKeyA': 'registry',
 'RegQueryInfoKeyW': 'registry',
 'RegCloseKey': 'registry',
 'CreateThread': 'process',
 'CreateRemoteThread': 'process',
 'CreateRemoteThreadEx': 'process',
 'Thread32First': 'process',
 'Thread32Next': 'process',
 'GetSystemMetrics': 'misc',
 'GetCursorPos': 'misc',
 'GetComputerNameA': 'misc',
 'GetComputerNameW': 'misc',
 'GetUserNameA': 'misc',
 'GetUserNameW': 'misc',
 'GetUserNameExA': 'misc',
 'GetUserNameExW': 'misc',
 'EnumWindows': 'misc',
 'GetDiskFreeSpaceW': 'misc',
 'GetDiskFreeSpaceExW': 'misc',
 'WriteConsoleA': 'misc',
 'WriteConsoleW': 'misc',
 'SHGetSpecialFolderLocation': 'misc',
 'SHGetFolderPathW': 'misc',
 'LookupAccountSidW': 'misc',
 'ReadCabinetState': 'misc',
 'UuidCreate': 'misc',
 'GetTimeZoneInformation': 'misc',
 'GetFileVersionInfoSizeW': 'misc',
 'GetFileVersionInfoSizeExW': 'misc',
 'GetFileVersionInfoW': 'misc',
 'GetFileVersionInfoExW': 'misc',
 'NotifyBootConfigStatus': 'misc',
 'TaskDialog': 'misc',
 'CreateActCtxW': 'misc',
 'RegisterHotKey': 'misc',
 'SetStdHandle': 'misc',
 'URLDownloadToFileW': 'network',
 'InternetCrackUrlA': 'network',
 'InternetCrackUrlW': 'network',
 'InternetOpenA': 'network',
 'InternetOpenW': 'network',
 'InternetConnectA': 'network',
 'InternetConnectW': 'network',
 'InternetOpenUrlA': 'network',
 'InternetOpenUrlW': 'network',
 'InternetQueryOptionA': 'network',
 'InternetSetOptionA': 'network',
 'HttpOpenRequestA': 'network',
 'HttpOpenRequestW': 'network',
 'HttpSendRequestA': 'network',
 'HttpSendRequestW': 'network',
 'InternetReadFile': 'network',
 'InternetWriteFile': 'network',
 'InternetCloseHandle': 'network',
 'InternetGetConnectedState': 'network',
 'InternetGetConnectedStateExA': 'network',
 'InternetGetConnectedStateExW': 'network',
 'InternetSetStatusCallback': 'network',
 'DeleteUrlCacheEntryA': 'network',
 'DeleteUrlCacheEntryW': 'network',
 'DnsQuery_A': 'network',
 'DnsQuery_UTF8': 'network',
 'DnsQuery_W': 'network',
 'getaddrinfo': 'network',
 'GetAddrInfoW': 'network',
 'GetInterfaceInfo': 'network',
 'GetAdaptersInfo': 'network',
 'GetAdaptersAddresses': 'network',
 'HttpQueryInfoA': 'network',
 'ObtainUserAgentString': 'network',
 'GetBestInterfaceEx': 'network',
 'WNetGetProviderNameW': 'network',
 'NtCreateProcess': 'process',
 'NtCreateProcessEx': 'process',
 'NtCreateUserProcess': 'process',
 'RtlCreateUserProcess': 'process',
 'NtOpenProcess': 'process',
 'NtTerminateProcess': 'process',
 'NtCreateSection': 'process',
 'NtMakeTemporaryObject': 'process',
 'NtMakePermanentObject': 'process',
 'NtOpenSection': 'process',
 'NtUnmapViewOfSection': 'process',
 'NtAllocateVirtualMemory': 'process',
 'NtReadVirtualMemory': 'process',
 'NtWriteVirtualMemory': 'process',
 'NtProtectVirtualMemory': 'process',
 'NtFreeVirtualMemory': 'process',
 'NtMapViewOfSection': 'process',
 'CreateJobObjectW': 'process',
 'SetInformationJobObject': 'process',
 'AssignProcessToJobObject': 'process',
 'CDocument_write': 'iexplore',
 'CHyperlink_SetUrlComponent': 'iexplore',
 'CIFrameElement_CreateElement': 'iexplore',
 'CWindow_AddTimeoutCode': 'iexplore',
 'CScriptElement_put_src': 'iexplore',
 'CElement_put_innerHTML': 'iexplore',
 'CImgElement_put_src': 'iexplore',
 'NtDelayExecution': 'synchronisation',
 'GetLocalTime': 'synchronisation',
 'GetSystemTime': 'synchronisation',
 'GetTickCount': 'synchronisation',
 'GetSystemTimeAsFileTime': 'synchronisation',
 'NtQuerySystemTime': 'synchronisation',
 'timeGetTime': 'synchronisation',
 'OpenSCManagerA': 'services',
 'OpenSCManagerW': 'services',
 'CreateServiceA': 'services',
 'CreateServiceW': 'services',
 'OpenServiceA': 'services',
 'OpenServiceW': 'services',
 'StartServiceA': 'services',
 'StartServiceW': 'services',
 'ControlService': 'services',
 'DeleteService': 'services',
 'EnumServicesStatusA': 'services',
 'EnumServicesStatusW': 'services',
 'StartServiceCtrlDispatcherW': 'services',
 'NtCreateKey': 'registry',
 'NtOpenKey': 'registry',
 'NtOpenKeyEx': 'registry',
 'NtRenameKey': 'registry',
 'NtReplaceKey': 'registry',
 'NtEnumerateKey': 'registry',
 'NtEnumerateValueKey': 'registry',
 'NtSetValueKey': 'registry',
 'NtQueryValueKey': 'registry',
 'NtQueryMultipleValueKey': 'registry',
 'NtDeleteKey': 'registry',
 'NtDeleteValueKey': 'registry',
 'NtLoadKey': 'registry',
 'NtLoadKey2': 'registry',
 'NtLoadKeyEx': 'registry',
 'NtQueryKey': 'registry',
 'NtSaveKey': 'registry',
 'NtSaveKeyEx': 'registry',
 'CreateDirectoryW': 'file',
 'CreateDirectoryExW': 'file',
 'RemoveDirectoryA': 'file',
 'RemoveDirectoryW': 'file',
 'MoveFileWithProgressW': 'file',
 'FindFirstFileExA': 'file',
 'FindFirstFileExW': 'file',
 'CopyFileA': 'file',
 'CopyFileW': 'file',
 'CopyFileExW': 'file',
 'DeleteFileW': 'file',
 'GetFileType': 'file',
 'GetFileSize': 'file',
 'GetFileSizeEx': 'file',
 'GetFileInformationByHandle': 'file',
 'GetFileInformationByHandleEx': 'file',
 'SetFilePointer': 'file',
 'SetFilePointerEx': 'file',
 'SetFileInformationByHandle': 'file',
 'DeviceIoControl': 'file',
 'GetSystemDirectoryA': 'file',
 'GetSystemDirectoryW': 'file',
 'GetSystemWindowsDirectoryA': 'file',
 'GetSystemWindowsDirectoryW': 'file',
 'GetTempPathW': 'file',
 'SetFileAttributesW': 'file',
 'GetFileAttributesW': 'file',
 'GetFileAttributesExW': 'file',
 'SetEndOfFile': 'file',
 'GetVolumeNameForVolumeMountPointW': 'file',
 'GetVolumePathNamesForVolumeNameW': 'file',
 'GetVolumePathNameW': 'file',
 'GetShortPathNameW': 'file',
 'SearchPathW': 'file',
 'SetFileTime': 'file',
 'CryptAcquireContextA': 'crypto',
 'CryptAcquireContextW': 'crypto',
 'CryptProtectData': 'crypto',
 'CryptUnprotectData': 'crypto',
 'CryptProtectMemory': 'crypto',
 'CryptUnprotectMemory': 'crypto',
 'CryptDecrypt': 'crypto',
 'CryptEncrypt': 'crypto',
 'CryptHashData': 'crypto',
 'CryptDecodeMessage': 'crypto',
 'CryptDecryptMessage': 'crypto',
 'CryptEncryptMessage': 'crypto',
 'CryptHashMessage': 'crypto',
 'CryptExportKey': 'crypto',
 'CryptGenKey': 'crypto',
 'CryptCreateHash': 'crypto',
 'CryptDecodeObjectEx': 'crypto',
 'PRF': 'crypto',
 'Ssl3GenerateKeyMaterial': 'crypto',
 'EncryptMessage': 'crypto',
 'DecryptMessage': 'crypto',
 'IWbemServices_ExecQuery': 'misc',
 'IWbemServices_ExecQueryAsync': 'misc',
 'IWbemServices_ExecMethod': 'misc',
 'IWbemServices_ExecMethodAsync': 'misc',
 '_vbe6_StringConcat': 'office',
 'vbe6_CreateObject': 'office',
 'vbe6_GetObject': 'office',
 'vbe6_GetIDFromName': 'office',
 'vbe6_CallByName': 'office',
 'vbe6_Invoke': 'office',
 'vbe6_Shell': 'office',
 'vbe6_Import': 'office',
 'vbe6_Open': 'office',
 'vbe6_Print': 'office',
 'vbe6_Close': 'office',
 'FindResourceA': 'resource',
 'FindResourceW': 'resource',
 'FindResourceExA': 'resource',
 'FindResourceExW': 'resource',
 'LoadResource': 'resource',
 'SizeofResource': 'resource',
 'NtCreateMutant': 'synchronisation',
 'NtOpenMutant': 'synchronisation',
 'NtCreateThread': 'process',
 'NtCreateThreadEx': 'process',
 'NtOpenThread': 'process',
 'NtGetContextThread': 'process',
 'NtSetContextThread': 'process',
 'NtSuspendThread': 'process',
 'NtResumeThread': 'process',
 'NtTerminateThread': 'process',
 'RtlCreateUserThread': 'process',
 'NtQueueApcThread': 'process',
 'NetShareEnum': 'netapi',
 'NtCreateFile': 'file',
 'NtDeleteFile': 'file',
 'NtOpenFile': 'file',
 'NtReadFile': 'file',
 'NtWriteFile': 'file',
 'NtDeviceIoControlFile': 'file',
 'NtQueryDirectoryFile': 'file',
 'NtQueryInformationFile': 'file',
 'NtSetInformationFile': 'file',
 'NtOpenDirectoryObject': 'file',
 'NtCreateDirectoryObject': 'file',
 'NtQueryAttributesFile': 'file',
 'NtQueryFullAttributesFile': 'file',
 'SetUnhandledExceptionFilter': 'exception',
 'RtlAddVectoredExceptionHandler': 'exception',
 'RtlAddVectoredContinueHandler': 'exception',
 'RtlRemoveVectoredExceptionHandler': 'exception',
 'RtlRemoveVectoredContinueHandler': 'exception',
 'RtlDispatchException': 'exception',
 '_RtlRaiseException': 'exception',
 '_NtRaiseException': 'exception',
 'NetGetJoinInformation': 'netapi',
 'NetUserGetInfo': 'netapi',
 'NetUserGetLocalGroups': 'netapi',
 'SetWindowsHookExA': 'system',
 'SetWindowsHookExW': 'system',
 'OutputDebugStringA': 'system',
 'UnhookWindowsHookEx': 'system',
 'LdrLoadDll': 'system',
 'LdrUnloadDll': 'system',
 'LdrGetDllHandle': 'system',
 'LdrGetProcedureAddress': 'system',
 'ExitWindowsEx': 'system',
 'IsDebuggerPresent': 'system',
 'LookupPrivilegeValueW': 'system',
 'NtDuplicateObject': 'system',
 'NtClose': 'system',
 'GetSystemInfo': 'system',
 'GetNativeSystemInfo': 'system',
 'SetErrorMode': 'system',
 'NtLoadDriver': 'system',
 'NtUnloadDriver': 'system',
 'GetAsyncKeyState': 'system',
 'GetKeyboardState': 'system',
 'GetKeyState': 'system',
 'SendNotifyMessageA': 'system',
 'SendNotifyMessageW': 'system',
 'RtlCompressBuffer': 'system',
 'RtlDecompressBuffer': 'system',
 'RtlDecompressFragment': 'system',
 'GlobalMemoryStatus': 'system',
 'GlobalMemoryStatusEx': 'system',
 'NtQuerySystemInformation': 'system',
 'NtShutdownSystem': 'system',
 'CreateProcessInternalW': 'process',
 'ShellExecuteExW': 'process',
 'ReadProcessMemory': 'process',
 'WriteProcessMemory': 'process',
 'system': 'process',
 'CreateToolhelp32Snapshot': 'process',
 'Process32FirstW': 'process',
 'Process32NextW': 'process',
 'Module32FirstW': 'process',
 'Module32NextW': 'process',
 'WSAStartup': 'network',
 'gethostbyname': 'network',
 'socket': 'network',
 'getsockname': 'network',
 'connect': 'network',
 'send': 'network',
 'sendto': 'network',
 'recv': 'network',
 'recvfrom': 'network',
 'accept': 'network',
 'bind': 'network',
 'listen': 'network',
 'select': 'network',
 'setsockopt': 'network',
 'ioctlsocket': 'network',
 'closesocket': 'network',
 'shutdown': 'network',
 'WSAAccept': 'network',
 'WSARecv': 'network',
 'WSARecvFrom': 'network',
 'WSASend': 'network',
 'WSASendTo': 'network',
 'WSASocketA': 'network',
 'WSASocketW': 'network',
 'WSAConnect': 'network',
 'ConnectEx': 'network',
 'TransmitFile': 'network',
 'CoCreateInstance': 'ole',
 'OleInitialize': 'ole',
 'CoInitializeEx': 'ole',
 'CoUninitialize': 'ole',
 'CoInitializeSecurity': 'ole',
 'CoCreateInstanceEx': 'ole',
 'CoGetClassObject': 'ole',
 'OleConvertOLESTREAMToIStorage': 'ole',
 'FindWindowA': 'ui',
 'FindWindowW': 'ui',
 'FindWindowExA': 'ui',
 'FindWindowExW': 'ui',
 'GetForegroundWindow': 'ui',
 'MessageBoxTimeoutA': 'ui',
 'MessageBoxTimeoutW': 'ui',
 'DrawTextExA': 'ui',
 'DrawTextExW': 'ui',
 'LoadStringA': 'ui',
 'LoadStringW': 'ui',
 '_CreateWindowExA': 'ui',
 '_CreateWindowExW': 'ui',
 '_DialogBoxIndirectParamA': 'ui',
 '_DialogBoxIndirectParamW': 'ui',
 'CertOpenStore': 'certificate',
 'CertOpenSystemStoreA': 'certificate',
 'CertOpenSystemStoreW': 'certificate',
 'CertControlStore': 'certificate',
 'CertCreateCertificateContext': 'certificate'}
'''.replace('\'', '\"'))


API_type_to_api_dict = json.loads('''{
'network': ['socket',
  'WSASend',
  'HttpSendRequestA',
  'WNetGetProviderNameW',
  'setsockopt',
  'WSAAccept',
  'recv',
  'GetAddrInfoW',
  'connect',
  'DeleteUrlCacheEntryW',
  'InternetGetConnectedState',
  'WSARecv',
  'WSAConnect',
  'InternetConnectA',
  'listen',
  'closesocket',
  'ioctlsocket',
  'TransmitFile',
  'InternetSetStatusCallback',
  'select',
  'getsockname',
  'InternetWriteFile',
  'DeleteUrlCacheEntryA',
  'gethostbyname',
  'recvfrom',
  'WSASocketW',
  'HttpSendRequestW',
  'shutdown',
  'WSARecvFrom',
  'InternetCloseHandle',
  'bind',
  'InternetCrackUrlW',
  'WSASocketA',
  'GetBestInterfaceEx',
  'ConnectEx',
  'InternetGetConnectedStateExA',
  'URLDownloadToFileW',
  'sendto',
  'InternetOpenUrlW',
  'HttpOpenRequestW',
  'send',
  'DnsQuery_W',
  'InternetOpenUrlA',
  'HttpQueryInfoA',
  'ObtainUserAgentString',
  'InternetConnectW',
  'InternetReadFile',
  'GetInterfaceInfo',
  'InternetGetConnectedStateExW',
  'InternetOpenW',
  'accept',
  'WSAStartup',
  'DnsQuery_UTF8',
  'InternetOpenA',
  'InternetSetOptionA',
  'InternetQueryOptionA',
  'WSASendTo',
  'GetAdaptersInfo',
  'GetAdaptersAddresses',
  'DnsQuery_A',
  'HttpOpenRequestA',
  'InternetCrackUrlA',
  'getaddrinfo'],
 'ole': ['OleInitialize',
  'CoInitializeSecurity',
  'CoUninitialize',
  'OleConvertOLESTREAMToIStorage',
  'CoCreateInstance',
  'CoCreateInstanceEx',
  'CoInitializeEx',
  'CoGetClassObject'],
 'crypto': ['CryptHashData',
  'CryptProtectMemory',
  'CryptUnprotectMemory',
  'CryptUnprotectData',
  'CryptDecodeObjectEx',
  'CryptAcquireContextA',
  'CryptExportKey',
  'CryptAcquireContextW',
  'PRF',
  'CryptCreateHash',
  'Ssl3GenerateKeyMaterial',
  'CryptHashMessage',
  'CryptEncryptMessage',
  'CryptDecrypt',
  'CryptGenKey',
  'CryptProtectData',
  'CryptDecryptMessage',
  'CryptEncrypt',
  'CryptDecodeMessage',
  'DecryptMessage',
  'EncryptMessage'],
 'resource': ['LoadResource',
  'FindResourceA',
  'FindResourceExA',
  'FindResourceW',
  'SizeofResource',
  'FindResourceExW'],
 'file': ['NtCreateFile',
  'GetFileAttributesW',
  'GetSystemDirectoryA',
  'NtQueryAttributesFile',
  'CopyFileExW',
  'GetFileInformationByHandle',
  'GetFileAttributesExW',
  'SetFileTime',
  'SetFilePointerEx',
  'NtDeleteFile',
  'GetVolumePathNameW',
  'CreateDirectoryW',
  'NtOpenFile',
  'NtQueryInformationFile',
  'CopyFileA',
  'GetSystemWindowsDirectoryA',
  'SetEndOfFile',
  'NtCreateDirectoryObject',
  'GetFileType',
  'GetFileInformationByHandleEx',
  'NtQueryDirectoryFile',
  'GetSystemDirectoryW',
  'GetVolumeNameForVolumeMountPointW',
  'NtSetInformationFile',
  'DeleteFileW',
  'GetSystemWindowsDirectoryW',
  'NtOpenDirectoryObject',
  'SetFilePointer',
  'DeviceIoControl',
  'GetFileSizeEx',
  'RemoveDirectoryW',
  'FindFirstFileExW',
  'NtQueryFullAttributesFile',
  'GetShortPathNameW',
  'GetTempPathW',
  'SearchPathW',
  'GetFileSize',
  'SetFileAttributesW',
  'RemoveDirectoryA',
  'NtReadFile',
  'NtWriteFile',
  'SetFileInformationByHandle',
  'NtDeviceIoControlFile',
  'CreateDirectoryExW',
  'CopyFileW',
  'FindFirstFileExA',
  'GetVolumePathNamesForVolumeNameW',
  'MoveFileWithProgressW'],
 'services': ['OpenServiceW',
  'StartServiceW',
  'DeleteService',
  'ControlService',
  'EnumServicesStatusA',
  'StartServiceA',
  'StartServiceCtrlDispatcherW',
  'EnumServicesStatusW',
  'CreateServiceA',
  'OpenSCManagerW',
  'CreateServiceW',
  'OpenServiceA',
  'OpenSCManagerA'],
 'registry': ['RegCreateKeyExA',
  'RegEnumValueA',
  'RegQueryInfoKeyW',
  'NtRenameKey',
  'NtLoadKey',
  'NtQueryKey',
  'NtReplaceKey',
  'RegQueryInfoKeyA',
  'RegOpenKeyExW',
  'RegDeleteValueW',
  'NtSaveKey',
  'RegEnumKeyExA',
  'RegEnumKeyExW',
  'NtQueryValueKey',
  'NtQueryMultipleValueKey',
  'NtSetValueKey',
  'NtLoadKey2',
  'NtOpenKey',
  'RegDeleteKeyA',
  'RegQueryValueExA',
  'RegOpenKeyExA',
  'RegEnumValueW',
  'RegDeleteValueA',
  'NtEnumerateValueKey',
  'RegCreateKeyExW',
  'RegDeleteKeyW',
  'NtDeleteKey',
  'RegSetValueExW',
  'NtDeleteValueKey',
  'NtCreateKey',
  'NtOpenKeyEx',
  'NtEnumerateKey',
  'RegQueryValueExW',
  'RegEnumKeyW',
  'NtLoadKeyEx',
  'RegSetValueExA',
  'RegCloseKey',
  'NtSaveKeyEx'],
 'exception': ['__exception__', 'RtlAddVectoredExceptionHandler',
  '_RtlRaiseException',
  'RtlRemoveVectoredContinueHandler',
  'RtlRemoveVectoredExceptionHandler',
  '_NtRaiseException',
  'SetUnhandledExceptionFilter',
  'RtlDispatchException',
  'RtlAddVectoredContinueHandler'],
 'misc': ['GetFileVersionInfoW',
  'UuidCreate',
  'LookupAccountSidW',
  'ReadCabinetState',
  'GetFileVersionInfoSizeW',
  'GetFileVersionInfoSizeExW',
  'SHGetFolderPathW',
  'GetSystemMetrics',
  'GetUserNameExA',
  'CreateActCtxW',
  'GetTimeZoneInformation',
  'SHGetSpecialFolderLocation',
  'NotifyBootConfigStatus',
  'GetComputerNameA',
  'GetCursorPos',
  'SetStdHandle',
  'GetUserNameExW',
  'IWbemServices_ExecQueryAsync',
  'GetUserNameW',
  'GetUserNameA',
  'GetDiskFreeSpaceW',
  'GetDiskFreeSpaceExW',
  'RegisterHotKey',
  'WriteConsoleW',
  'WriteConsoleA',
  'GetFileVersionInfoExW',
  'GetComputerNameW',
  'IWbemServices_ExecMethod',
  'IWbemServices_ExecQuery',
  'EnumWindows',
  'TaskDialog',
  'IWbemServices_ExecMethodAsync'],
 'certificate': ['CertOpenSystemStoreA',
  'CertOpenStore',
  'CertControlStore',
  'CertCreateCertificateContext',
  'CertOpenSystemStoreW'],
 'ui': ['DrawTextExW',
  '_CreateWindowExW',
  'FindWindowW',
  '_CreateWindowExA',
  'DrawTextExA',
  'MessageBoxTimeoutW',
  'FindWindowA',
  'LoadStringA',
  'LoadStringW',
  'FindWindowExW',
  '_DialogBoxIndirectParamA',
  'GetForegroundWindow',
  'FindWindowExA',
  '_DialogBoxIndirectParamW',
  'MessageBoxTimeoutA'],
 'iexplore': ['CScriptElement_put_src',
  'CElement_put_innerHTML',
  'CImgElement_put_src',
  'CHyperlink_SetUrlComponent',
  'CIFrameElement_CreateElement',
  'CDocument_write',
  'CWindow_AddTimeoutCode'],
 'process': ['NtCreateUserProcess',
  'NtCreateThreadEx',
  'NtOpenProcess',
  'NtMakePermanentObject',
  'NtSetContextThread',
  'AssignProcessToJobObject',
  'NtGetContextThread',
  'NtOpenSection',
  'NtReadVirtualMemory',
  'WriteProcessMemory',
  'CreateRemoteThread',
  'NtFreeVirtualMemory',
  'Thread32First',
  'system',
  'NtAllocateVirtualMemory',
  'CreateToolhelp32Snapshot',
  'RtlCreateUserProcess',
  'NtCreateThread',
  'CreateThread',
  'NtSuspendThread',
  'Module32NextW',
  'NtCreateProcessEx',
  'NtMapViewOfSection',
  'NtQueueApcThread',
  'NtMakeTemporaryObject',
  'CreateRemoteThreadEx',
  'NtOpenThread',
  'RtlCreateUserThread',
  'NtCreateProcess',
  'NtResumeThread',
  'CreateJobObjectW',
  'Process32FirstW',
  'Process32NextW',
  'NtTerminateThread',
  'CreateProcessInternalW',
  'SetInformationJobObject',
  'NtCreateSection',
  'NtProtectVirtualMemory',
  'NtUnmapViewOfSection',
  'ReadProcessMemory',
  'Thread32Next',
  'NtTerminateProcess',
  'Module32FirstW',
  'ShellExecuteExW',
  'NtWriteVirtualMemory'],
 'netapi': ['NetGetJoinInformation',
  'NetShareEnum',
  'NetUserGetLocalGroups',
  'NetUserGetInfo'],
 'office': ['vbe6_Invoke',
  'vbe6_Shell',
  '_vbe6_StringConcat',
  'vbe6_CreateObject',
  'vbe6_Close',
  'vbe6_GetIDFromName',
  'vbe6_GetObject',
  'vbe6_CallByName',
  'vbe6_Open',
  'vbe6_Print',
  'vbe6_Import'],
 'system': ['GetAsyncKeyState',
  'LdrLoadDll',
  'LdrUnloadDll',
  'IsDebuggerPresent',
  'UnhookWindowsHookEx',
  'ExitWindowsEx',
  'LdrGetDllHandle',
  'SetWindowsHookExW',
  'NtUnloadDriver',
  'SendNotifyMessageW',
  'OutputDebugStringA',
  'NtClose',
  'RtlDecompressFragment',
  'LookupPrivilegeValueW',
  'LdrGetProcedureAddress',
  'SendNotifyMessageA',
  'GlobalMemoryStatus',
  'NtQuerySystemInformation',
  'SetWindowsHookExA',
  'NtLoadDriver',
  'RtlDecompressBuffer',
  'NtShutdownSystem',
  'GetKeyState',
  'GetNativeSystemInfo',
  'GetKeyboardState',
  'GetSystemInfo',
  'NtDuplicateObject',
  'GlobalMemoryStatusEx',
  'RtlCompressBuffer',
  'SetErrorMode'],
 'synchronisation': ['timeGetTime',
  'NtOpenMutant',
  'NtDelayExecution',
  'GetLocalTime',
  'NtCreateMutant',
  'GetSystemTimeAsFileTime',
  'GetTickCount',
  'GetSystemTime',
  'NtQuerySystemTime']}
'''.replace('\'', '\"'))


# In[10]:


feat_location = '''location'''.split()
feat_info = '''duration'''.split()

feat_sig = '''severity1
severity2
severity3
severity4
severity5
severity6
severity7
severity8'''.split()

feat_network = '''tls
udp
dns_servers
http
icmp
smtp
tcp
mitm
hosts
dns
domains
dead_hosts
irc'''.split()

feat_other = '''
processes_nos
'''.split()

feat_api = '''
network
ole
crypto
resource
file
services
registry
exception
misc
certificate
ui
iexplore
process
netapi
office
system
synchronisation'''.split()

FEATURES2 = feat_location+feat_info+feat_sig+feat_network+feat_other+feat_api

def get_feat_list():
    return FEATURES2

# In[11]:


def get_features2(hash_, file):
    with open(file, 'r', errors='replace') as f:
        data = json.loads(f.read())
        dic = {}
        
        dic['location'] = hash_ 
        
        try:
            dic['duration'] = float(data['info']['duration'])
        except:
            dic['duration'] = 0.0
        
        try:
            dic['processes_nos'] = len(data['behavior']['processes'])
        except:
            dic['processes_nos'] = 0
    
        
        for sev in feat_sig:
            dic[str(sev)] = 0
            
        for sig in data['signatures']:
            sev = 'severity'+str(sig['severity'])
            dic[sev] = dic[sev]+1
        
        for net in feat_network:
            try:
                dic[net]=len(data['network'][net])
            except:
                dic[net]=0
#                 print("Error point 1")
            
#         try:
#             dic['virus_total'] = int(data['virustotal']['total'])
#         except:
#             bad_set.add('virus_total')
#             print("Error point 2")
        
#         try:
#             dic['virus_positive'] = int(data['virustotal']['positives'])
#         except:
#             bad_set.add('virus_positive')
#             print("Error point 3")
            
        for api in feat_api:
            dic[api] = 0
            
        try:
            for pid, api_use_dict in data['behavior']['apistats'].items():
                for api, nos in api_use_dict.items():
                    key = API_api_to_type_dict[api]
                    dic[key]+=1
        except:
            pass
        
    return dic


# In[13]:


def get_dyn_f(hash_dyn):
    dics = []
    for hash_, file in hash_dyn.items():
        dic = get_features2(hash_, file)
        
        for feature in FEATURES2:
            if not (feature in dic.keys()):
                dic[feature] = 0
        
        dics.append(dic)

#     try:
#         with open(csv_location, 'w') as csvfile: 
#             writer = csv.DictWriter(csvfile, fieldnames = FEATURES2) 
#             writer.writeheader()
#             writer.writerows(dics) 
#     except Exception as e:
#         print("ERROR while creating CSV.", csv_location, e)
    
# #     print(dics)
    
    return dics
        

